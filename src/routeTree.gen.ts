/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AdminRouteImport } from './routes/admin/route'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as AdminSolicitudImport } from './routes/admin/solicitud'
import { Route as AdminSearchImport } from './routes/admin/search'
import { Route as AdminPagosImport } from './routes/admin/pagos'
import { Route as AdminNotificationImport } from './routes/admin/notification'
import { Route as AdminMetricsImport } from './routes/admin/metrics'
import { Route as AdminHomeImport } from './routes/admin/home'
import { Route as AdminEventsImport } from './routes/admin/events'
import { Route as AdminEstadisticasImport } from './routes/admin/estadisticas'
import { Route as AdminProfileIndexImport } from './routes/admin/profile/index'
import { Route as AdminCategoriesIndexImport } from './routes/admin/categories/index'
import { Route as AdminProfileUserIDImport } from './routes/admin/profile/$userID'
import { Route as AdminCategoriesSearchImport } from './routes/admin/categories/search'
import { Route as AdminProfileEditUserIDImport } from './routes/admin/profile/edit.$userID'

// Create Virtual Routes

const PublicLazyImport = createFileRoute('/_public')()
const AuthLazyImport = createFileRoute('/_auth')()
const IndexLazyImport = createFileRoute('/')()
const AuthStartLazyImport = createFileRoute('/_auth/start')()
const AuthRegisterLazyImport = createFileRoute('/_auth/register')()
const AuthLoginLazyImport = createFileRoute('/_auth/login')()

// Create/Update Routes

const PublicLazyRoute = PublicLazyImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/_public.lazy').then((d) => d.Route))

const AuthLazyRoute = AuthLazyImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/_auth.lazy').then((d) => d.Route))

const AdminRouteRoute = AdminRouteImport.update({
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AdminIndexRoute = AdminIndexImport.update({
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AuthStartLazyRoute = AuthStartLazyImport.update({
  path: '/start',
  getParentRoute: () => AuthLazyRoute,
} as any).lazy(() => import('./routes/_auth.start.lazy').then((d) => d.Route))

const AuthRegisterLazyRoute = AuthRegisterLazyImport.update({
  path: '/register',
  getParentRoute: () => AuthLazyRoute,
} as any).lazy(() =>
  import('./routes/_auth.register.lazy').then((d) => d.Route),
)

const AuthLoginLazyRoute = AuthLoginLazyImport.update({
  path: '/login',
  getParentRoute: () => AuthLazyRoute,
} as any).lazy(() => import('./routes/_auth.login.lazy').then((d) => d.Route))

const AdminSolicitudRoute = AdminSolicitudImport.update({
  path: '/solicitud',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminSearchRoute = AdminSearchImport.update({
  path: '/search',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminPagosRoute = AdminPagosImport.update({
  path: '/pagos',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminNotificationRoute = AdminNotificationImport.update({
  path: '/notification',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminMetricsRoute = AdminMetricsImport.update({
  path: '/metrics',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminHomeRoute = AdminHomeImport.update({
  path: '/home',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminEventsRoute = AdminEventsImport.update({
  path: '/events',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminEstadisticasRoute = AdminEstadisticasImport.update({
  path: '/estadisticas',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminProfileIndexRoute = AdminProfileIndexImport.update({
  path: '/profile/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminCategoriesIndexRoute = AdminCategoriesIndexImport.update({
  path: '/categories/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminProfileUserIDRoute = AdminProfileUserIDImport.update({
  path: '/profile/$userID',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminCategoriesSearchRoute = AdminCategoriesSearchImport.update({
  path: '/categories/search',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminProfileEditUserIDRoute = AdminProfileEditUserIDImport.update({
  path: '/profile/edit/$userID',
  getParentRoute: () => AdminRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      preLoaderRoute: typeof AuthLazyImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      preLoaderRoute: typeof PublicLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/estadisticas': {
      preLoaderRoute: typeof AdminEstadisticasImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/events': {
      preLoaderRoute: typeof AdminEventsImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/home': {
      preLoaderRoute: typeof AdminHomeImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/metrics': {
      preLoaderRoute: typeof AdminMetricsImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/notification': {
      preLoaderRoute: typeof AdminNotificationImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/pagos': {
      preLoaderRoute: typeof AdminPagosImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/search': {
      preLoaderRoute: typeof AdminSearchImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/solicitud': {
      preLoaderRoute: typeof AdminSolicitudImport
      parentRoute: typeof AdminRouteImport
    }
    '/_auth/login': {
      preLoaderRoute: typeof AuthLoginLazyImport
      parentRoute: typeof AuthLazyImport
    }
    '/_auth/register': {
      preLoaderRoute: typeof AuthRegisterLazyImport
      parentRoute: typeof AuthLazyImport
    }
    '/_auth/start': {
      preLoaderRoute: typeof AuthStartLazyImport
      parentRoute: typeof AuthLazyImport
    }
    '/admin/': {
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/categories/search': {
      preLoaderRoute: typeof AdminCategoriesSearchImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/profile/$userID': {
      preLoaderRoute: typeof AdminProfileUserIDImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/categories/': {
      preLoaderRoute: typeof AdminCategoriesIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/profile/': {
      preLoaderRoute: typeof AdminProfileIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/profile/edit/$userID': {
      preLoaderRoute: typeof AdminProfileEditUserIDImport
      parentRoute: typeof AdminRouteImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexLazyRoute,
  AdminRouteRoute.addChildren([
    AdminEstadisticasRoute,
    AdminEventsRoute,
    AdminHomeRoute,
    AdminMetricsRoute,
    AdminNotificationRoute,
    AdminPagosRoute,
    AdminSearchRoute,
    AdminSolicitudRoute,
    AdminIndexRoute,
    AdminCategoriesSearchRoute,
    AdminProfileUserIDRoute,
    AdminCategoriesIndexRoute,
    AdminProfileIndexRoute,
    AdminProfileEditUserIDRoute,
  ]),
  AuthLazyRoute.addChildren([
    AuthLoginLazyRoute,
    AuthRegisterLazyRoute,
    AuthStartLazyRoute,
  ]),
])

/* prettier-ignore-end */
